// #use "./basic.zeus"
#emit "#include <stdio.h>"
printf :: fn(fmt: string, args: ..) #foreign;
scanf :: fn(fmt: string, args: ..) #foreign;

Foo :: struct {
    bar: int,
}

// gen_code :: fn() string {
//     return "generated_function :: fn() { printf(\"Generated Function\n\"); }" ;
// }
// #run gen_code();

take_foo_ptr :: fn(foo: @Foo) {
    foo.bar += 10;
}

take_foo :: fn(foo: Foo) {
    printf("taken foo: %d\n", foo.bar);
}

take_int :: fn(a: int) {
    printf("a = %d\n", a);
}

take_array :: fn(arr: [] float) {
    // for i: 0..10 {
    //     printf("i: %d\n", i);
    // }
    i := 0;
    while i < arr.count {
        printf("%d: %f\n", i, arr[i]);
        i += 1;
    }

    // printf("first: %d\n", arr[0]);
    // for i: arr {
    //     printf("%d\n", i);
    // }
}

main :: fn() s32 {
    x := 20;
    foo: Foo;

    // literal     :: Foo{10}; <- constructed at compile time.
    // literal     :: Foo{x}; <- would result in an error.
    // constructor := Foo{x};

    xs := [] float {10.5, 20, 30};
    take_array(xs);

    take_foo_ptr(@foo);
    take_foo(foo);
    take_int(foo.bar);

    return 0;
}
